@article{Julia-2017,
  title     = {Julia: A fresh approach to numerical computing},
  author    = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B},
  journal   = {SIAM {R}eview},
  volume    = {59},
  number    = {1},
  pages     = {65--98},
  year      = {2017},
  publisher = {SIAM},
  doi       = {10.1137/141000671},
  url       = {https://epubs.siam.org/doi/10.1137/141000671}
}

@article{XoroshiroPaper,
  author     = {Blackman, David and Vigna, Sebastiano},
  title      = {Scrambled Linear Pseudorandom Number Generators},
  year       = {2021},
  issue_date = {December 2021},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {47},
  number     = {4},
  issn       = {0098-3500},
  url        = {https://doi.org/10.1145/3460772},
  doi        = {10.1145/3460772},
  abstract   = {F2-linear pseudorandom number generators are very popular due to their high speed, to the ease with which generators with a sizable state space can be created, and to their provable theoretical properties. However, they suffer from linear artifacts that show as failures in linearity-related statistical tests such as the binary-rank and the linear-complexity test. In this article, we give two new contributions. First, we introduce two new F2-linear transformations that have been handcrafted to have good statistical properties and at the same time to be programmable very efficiently on superscalar processors, or even directly in hardware. Then, we describe some scramblers, that is, nonlinear functions applied to the state array that reduce or delete the linear artifacts, and propose combinations of linear transformations and scramblers that give extremely fast pseudorandom number generators of high quality. A novelty in our approach is that we use ideas from the theory of filtered linear-feedback shift registers to prove some properties of our scramblers, rather than relying purely on heuristics. In the end, we provide simple, extremely fast generators that use a few hundred bits of memory, have provable properties, and pass strong statistical tests.},
  journal    = {ACM Trans. Math. Softw.},
  month      = {9},
  articleno  = {36},
  numpages   = {32},
  keywords   = {Pseudorandom number generators}
}

@online{Shootout,
    author = {Blackman, David and Vigna, Sebastiano},
    url    = {https://prng.di.unimi.it/}
}

@article{TestU01,
  author     = {L'Ecuyer, Pierre and Simard, Richard},
  title      = {TestU01: A C library for empirical testing of random number generators},
  year       = {2007},
  issue_date = {August 2007},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {33},
  number     = {4},
  issn       = {0098-3500},
  url        = {https://doi.org/10.1145/1268776.1268777},
  doi        = {10.1145/1268776.1268777},
  abstract   = {We introduce TestU01, a software library implemented in the ANSI C language, and offering a collection of utilities for the empirical statistical testing of uniform random number generators (RNGs). It provides general implementations of the classical statistical tests for RNGs, as well as several others tests proposed in the literature, and some original ones. Predefined tests suites for sequences of uniform random numbers over the interval (0, 1) and for bit sequences are available. Tools are also offered to perform systematic studies of the interaction between a specific test and the structure of the point sets produced by a given family of RNGs. That is, for a given kind of test and a given class of RNGs, to determine how large should be the sample size of the test, as a function of the generator's period length, before the generator starts to fail the test systematically. Finally, the library provides various types of generators implemented in generic form, as well as many specific generators proposed in the literature or found in widely used software. The tests can be applied to instances of the generators predefined in the library, or to user-defined generators, or to streams of random numbers produced by any kind of device or stored in files. Besides introducing TestU01, the article provides a survey and a classification of statistical tests for RNGs. It also applies batteries of tests to a long list of widely used RNGs.},
  journal    = {ACM Trans. Math. Softw.},
  month      = {8},
  articleno  = {22},
  numpages   = {40},
  keywords   = {Statistical software, random number generators, random number tests, statistical test}
}

@article{HammingWeightDependencies,
  author     = {Blackman, David and Vigna, Sebastiano},
  title      = {A New Test for Hamming-Weight Dependencies},
  year       = {2022},
  issue_date = {July 2022},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {32},
  number     = {3},
  issn       = {1049-3301},
  url        = {https://doi.org/10.1145/3527582},
  doi        = {10.1145/3527582},
  abstract   = {We describe a new statistical test for pseudorandom number generators (PRNGs). Our test can find bias induced by dependencies among the Hamming weights of the outputs of a PRNG, even for PRNGs that pass state-of-the-art tests of the same kind from the literature, and particularly for generators based on F2-linear transformations such as the dSFMT&nbsp;[22], xoroshiro1024+ &nbsp;[1], and WELL512&nbsp;[19].},
  journal    = {ACM Trans. Model. Comput. Simul.},
  month      = {7},
  articleno  = {19},
  numpages   = {13},
  keywords   = {Pseudorandom number generators}
}

@manual{Python,
  author       = {},
  title        = {Python Standard PRNG},
  url          = {https://docs.python.org/3/library/random.html}
}

@manual{MATLAB,
  author       = {MathWorks Inc.},
  title        = {RandStream.list},
  url          = {https://www.mathworks.com/help/matlab/ref/randstream.randstream.list.html}
}

@article{Excel,
  author          = {M\'{e}lard, G},
  journal         = {Computational Statistics},
  number          = {},
  title           = {On the accuracy of statistical procedures in Microsoft Excel 2010},
  volume          = {29},
  year            = {2014}
}

@manual{Cpp,
  author       = {ISO/IEC JTC},
  title        = {Mersenne Twister Engine},
  url          = {https://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine}
}

@manual{Mathematica,
  author       = {Wolfram Research},
  title        = {Random Number Generation},
  url          = {https://reference.wolfram.com/language/tutorial/RandomNumberGeneration.html#569959585},
}

@manual{CUDA,
  author       = {NVIDIA Corporation},
  title        = {Generator Types},
  url          = {https://docs.nvidia.com/cuda/curand/host-api-overview.html#generator-types},
}

@inproceedings{SFMT,
  author    = {Saito, Mutsuo
               and Matsumoto, Makoto},
  editor    = {Keller, Alexander
               and Heinrich, Stefan
               and Niederreiter, Harald},
  title     = {SIMD-Oriented Fast Mersenne Twister: a 128-bit Pseudorandom Number Generator},
  booktitle = {Monte Carlo and Quasi-Monte Carlo Methods 2006},
  year      = {2008},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {607--622},
  abstract  = {Mersenne Twister (MT) is a widely-used fast pseudorandom number generator (PRNG) with a long period of 219937 - 1, designed 10 years ago based on 32-bit operations. In this decade, CPUs for personal computers have acquired new features, such as Single Instruction Multiple Data (SIMD) operations (i.e., 128-bit operations) and multi-stage pipelines. Here we propose a 128-bit based PRNG, named SIMD-oriented Fast Mersenne Twister (SFMT), which is analogous to MT but making full use of these features. Its recursion fits pipeline processing better than MT, and it is roughly twice as fast as optimised MT using SIMD operations. Moreover, the dimension of equidistribution of SFMT is better than MT.},
  isbn      = {978-3-540-74496-2}
}

@article{MTGP,
  author          = {Agner Fog},
  journal         = {Journal of Modern Applied Statistical Methods},
  number          = {1},
  title           = {Pseudo-Random Number Generators for Vector Processors and Multicore Processors},
  volume          = {14},
  year            = {2015},
  doi             = {https://doi.org/10.56801/10.56801/v14.i.768},
}

@article{TwistedGFSR,
  author     = {Matsumoto, Makoto and Kurita, Yoshiharu},
  title      = {Twisted GFSR generators},
  year       = {1992},
  issue_date = {July 1992},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {2},
  number     = {3},
  issn       = {1049-3301},
  url        = {https://doi.org/10.1145/146382.146383},
  doi        = {10.1145/146382.146383},
  abstract   = {The generalized feed back shift register (GFSR) algorithm suggested by Lewis and Payne is a widely used pseudorandom number generator, but has the following serious drawbacks: (1) an initialization scheme to assure higher order equidistribution is involved and is time consuming; (2) each bit of the generated words constitutes an m-sequence based on a primitive trinomials, which shows poor randomness with respect to weight distribution; (3) a large working area is necessary; (4) the period of sequence is far shorter than the theoretical upper bound. This paper presents the twisted GFSR (TGFSR) algorithm, a slightly but essentially modified version of the GFSR, which solves all the above problems without loss of merit. Some practical TGFSR generators were implemented and passed strict empirical tests. These new generators are most suitable for simulation of a large distributive system, which requires a number of mutually independent pseudorandom number generators with compact size.},
  journal    = {ACM Trans. Model. Comput. Simul.},
  month      = {7},
  pages      = {179-194},
  numpages   = {16},
  keywords   = {matrix linear congruential generators, generalized feedback shift registers, TLP-sequences, GF(2m), m-sequences}
}

@article{Lehmer,
  author     = {Payne, W. H. and Rabung, J. R. and Bogyo, T. P.},
  title      = {Coding the Lehmer pseudo-random number generator},
  year       = {1969},
  issue_date = {Feb. 1969},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {12},
  number     = {2},
  issn       = {0001-0782},
  url        = {https://doi.org/10.1145/362848.362860},
  doi        = {10.1145/362848.362860},
  abstract   = {An algorithm and coding technique is presented for quick evaluation of the Lehmer pseudo-random number generator modulo 2 ** 31 - 1, a prime Mersenne number which produces 2 ** 31 - 2 numbers, on a p-bit (greater than 31) computer. The computation method is extendible to limited problems in modular arithmetic. Prime factorization for 2 ** 61 - 2 and a primitive root for 2 ** 61 - 1, the next largest prime Mersenne number, are given for possible construction of a pseudo-random number generator of increased cycle length.},
  journal    = {Commun. ACM},
  month      = {feb},
  pages      = {85–86},
  numpages   = {2},
  keywords   = {modular arithmetic, prime factorization, primitive roots, pseudo-random number, random number, simulation, uniform frequency function, uniform probability density}
}

@manual{StableRNGs,
  author       = {Rafael Fourquet and Eric Hanson},
  title        = {StableRNGs},
  url          = {https://github.com/JuliaRandom/StableRNGs.jl},
}

@manual{GNUSciLib,
  author       = {GNU Scientific Library},
  title        = {Random Number Generation},
  url          = {https://www.gnu.org/software/gsl/doc/html/rng.html#other-random-number-generators},
}

@manual{Practrand,
  author       = {Chris Doty-Humphrey},
  title        = {PractRand},
  url          = {https://pracrand.sourceforge.net/},
}

@misc{WhyNotRandomDevice,
  author       = {Chris Beck},
  howpublished = {StackOverflow},
  title        = {Why not just use random device?},
  year         = {2016},
  url          = {https://stackoverflow.com/a/39301751/11595495},
}