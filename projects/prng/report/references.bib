@article{matsumoto1998mersenne,
  title={Mersenne twister: a 623-dimensionally equidistributed uniform pseudo-random number generator},
  author={Matsumoto, Makoto and Nishimura, Takuji},
  journal={ACM Transactions on Modeling and Computer Simulation (TOMACS)},
  volume={8},
  number={1},
  pages={3--30},
  year={1998},
  publisher={ACM New York, NY, USA}
}

@article{jagannatam2008mersenne,
  title={Mersenne Twister--A Pseudo random number generator and its variants},
  author={Jagannatam, Archana},
  journal={George Mason University, Department of Electrical and Computer Engineering},
  year={2008}
}

@incollection{SHEMA2012209,
title = {Chapter 7 - Leveraging Platform Weaknesses},
editor = {Mike Shema},
booktitle = {Hacking Web Apps},
publisher = {Syngress},
address = {Boston},
pages = {209-238},
year = {2012},
isbn = {978-1-59749-951-4},
doi = {https://doi.org/10.1016/B978-1-59-749951-4.00007-2},
url = {https://www.sciencedirect.com/science/article/pii/B9781597499514000072},
author = {Mike Shema}
}

@article{varshney2012study,
  title={A study on the effect of shifting on LFSR PRNG},
  author={Varshney, Ankur Kumar and Sharma, Sushil Kumar and Singh, Rajesh},
  journal={International Journal of Engineering},
  volume={1},
  number={5},
  pages={1--7},
  year={2012}
}

@misc{Bhayani_2022, title={Pseudorandom number generation using LFSR}, url={https://arpit.substack.com/p/pseudorandom-number-generation-using}, journal={Pseudorandom Number Generation using LFSR}, publisher={Arpit’s Newsletter}, author={Bhayani, Arpit}, year={2022}, month={Feb}} 

@article{JSSv008i14,
 title={Xorshift RNGs},
 volume={8},
 url={https://www.jstatsoft.org/index.php/jss/article/view/v008i14},
 doi={10.18637/jss.v008.i14},
 abstract={Description of a class of simple, extremely fast random number generators (RNGs) with periods 2k - 1 for k = 32, 64, 96, 128, 160, 192. These RNGs seem to pass tests of randomness very well.},
 number={14},
 journal={Journal of Statistical Software},
 author={Marsaglia, George},
 year={2003},
 pages={1–6}
}

@article{MAKINO19941357,
title = {Lagged-Fibonacci random number generators on parallel computers},
journal = {Parallel Computing},
volume = {20},
number = {9},
pages = {1357-1367},
year = {1994},
issn = {0167-8191},
doi = {https://doi.org/10.1016/0167-8191(94)90042-6},
url = {https://www.sciencedirect.com/science/article/pii/0167819194900426},
author = {Jun Makino},
keywords = {Random number generator, Lagged-Fibonacci generator, GFSR generator, Parallel implementation, Timing results},
abstract = {Lagged-Fibonacci generators using +, − or ∗ are parallelized by the same method that has been applied to parallelize the GFSR generators. In this method, segments spaced by equal distances in a single lagged-Fibonacci sequence are generated in parallel. The necessary initialization for each segment can be executed in a short time by an efficient algorithm. Four generators are provided in a common style so that a user can easily replace one generator with another in his application programs.}
}

@inproceedings{10.1145/237578.237591,
author = {Aluru, Srinivas},
title = {Parallel additive lagged Fibonacci random number generators},
year = {1996},
isbn = {0897918037},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/237578.237591},
doi = {10.1145/237578.237591},
booktitle = {Proceedings of the 10th International Conference on Supercomputing},
pages = {102–108},
numpages = {7},
location = {Philadelphia, Pennsylvania, USA},
series = {ICS '96}
}

  @InProceedings{10.1007/978-1-4612-2552-2_17,
author="Mascagni, Michael
and Robinson, M. L.
and Pryor, Daniel V.
and Cuccaro, Steven A.",
editor="Niederreiter, Harald
and Shiue, Peter Jau-Shyong",
title="Parallel Pseudorandom Number Generation Using Additive Lagged-Fibonacci Recursions",
booktitle="Monte Carlo and Quasi-Monte Carlo Methods in Scientific Computing",
year="1995",
publisher="Springer New York",
address="New York, NY",
pages="263--277",
abstract="We study the suitability of the additive lagged-Fibonacci pseudorandom number generator for parallel computation. This generator has a relatively short period with respect to the size of its seed. However, the short period is more than made up for with the huge number of full-period cycles it contains. We call these different full-period cycles equivalence classes. We show how to enumerate the equivalence classes and how to compute seeds to select a given equivalence class. The use of these equivalence classes gives an explicit parallelization suitable for a fully reproducible asynchronous MIMD implementation. To explore such an implementation we introduce an exponential sum measure of quality for the additive lagged-Fibonacci generators used in serial or parallel. We then prove the first non-trivial results we are aware of on this measure of quality.",
isbn="978-1-4612-2552-2"
}
